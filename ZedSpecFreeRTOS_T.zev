<Z-EVES-GUI-State version="1" index="5"><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:1" history="2"><zed-box>   [CONTEXT, TASK] </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:2" history="3"><axiomatic-box><decl-part/>   bare_context: CONTEXT
  idle: TASK </axiomatic-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:3" history="4"><zed-box> STATE ::= nonexistent | ready | blocked | suspended | running </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:4" history="5"><zed-box ability="disabled">  transition == ({blocked}&cross;{nonexistent, ready, running, suspended}) &cup;({nonexistent}&cross;{ready, running}) &cup;({ready}&cross;{nonexistent, running, suspended}) &cup;({running}&cross;{blocked, nonexistent, ready, suspended}) &cup;({suspended}&cross;{nonexistent, ready, running}) </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:5" history="6"><theorem-def usage="grule">gTransitionType<ax-part/> transition &isin;&Popf;(STATE &cross;STATE) </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:6" history="7"><theorem-def usage="rule">lInTransition<ax-part/> &forall;l, r: STATE | (l, r) &isin;{nonexistent &rtarr;ready, running &rtarr;ready, blocked &rtarr;ready, suspended &rtarr;ready, ready &rtarr;running, blocked &rtarr;running, suspended &rtarr;running, nonexistent &rtarr;running, running &rtarr;suspended, ready &rtarr;suspended, blocked &rtarr;suspended, running &rtarr;blocked, running &rtarr;nonexistent, ready &rtarr;nonexistent, blocked &rtarr;nonexistent, suspended &rtarr;nonexistent}&bullet; (l, r) &isin;transition </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:7" history="8"><schema-box>TaskData<decl-part/>   tasks: &Popf;TASK
  running_task: TASK <ax-part/>  running_task &isin;tasks
  idle &isin;tasks </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:8" history="9"><schema-box>Init_TaskData<decl-part/>   TaskData' <ax-part/>  tasks' = {idle}
  running_task' = idle </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:9" history="10"><theorem-def>TaskDataInit<ax-part/> &exists;TaskData' &bullet; Init_TaskData </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:10" history="11"><schema-box>StateData<decl-part/>   state: TASK &rarr;STATE <ax-part/>  state(idle) &isin;{ready, running}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:11" history="12"><schema-box>Init_StateData<decl-part/>   StateData' <ax-part/>  state' = (&lambda;x: TASK &bullet; nonexistent) &oplus;{(idle &rtarr;running)}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:12" history="13"><theorem-def>StateDataInit<ax-part/> &exists;StateData' &bullet; Init_StateData </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:13" history="14"><schema-box>ContextData<decl-part/>   phys_context: CONTEXT
  log_context: TASK &rarr;CONTEXT </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:14" history="15"><schema-box>Init_ContextData<decl-part/>   ContextData' <ax-part/>  phys_context' = bare_context
  log_context' = (&lambda;x: TASK &bullet; bare_context) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:15" history="16"><theorem-def>ContextDataInit<ax-part/> &exists;ContextData' &bullet; Init_ContextData </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:16" history="17"><schema-box>PrioData<decl-part/>   priority: TASK &rarr;&Nopf;<ax-part/>  priority(idle) = 0 </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:17" history="18"><schema-box>Init_PrioData<decl-part/>   PrioData' <ax-part/>  priority' = (&lambda;x: TASK &bullet; 0) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:18" history="19"><theorem-def>PrioDataInit<ax-part/> &exists;PrioData' &bullet; Init_PrioData </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:19" history="20"><schema-box>Task<decl-part/>   TaskData
  StateData
  ContextData
  PrioData <ax-part/>  tasks = TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;)
  state &suptilde;&lvparen;{running}&rvparen;= {running_task}
  &forall;pt: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority(running_task)&geq;priority(pt) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:20" history="21"><schema-box>&Delta;Task<decl-part/>   Task
  Task' <ax-part/>  &forall;st: TASK | state'(st) &neq;state(st) &bullet; state(st) &rtarr;state'(st) &isin;transition </schema-box></textItem
><textItem location="gui::1" history="22"><axiomatic-box location="gui::1"><decl-part/>f: &Popf; TASK &rarrb; TASK<ax-part/>  &empty; &notin; <word style="roman"/>dom<word/> f
&lchev;topReadyTask&rchev;&forall; Task; a: &Popf; TASK &bullet; a &isin; <word style="roman"/>dom<word/> f &wedge; f(a) &isin; a &wedge; (&forall;t: a &bullet; priority(f(a)) &geq; priority(t))</axiomatic-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:21" history="23"><theorem-def>TaskProperty1<ax-part/> &forall;Task &bullet; state(running_task) = running </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:22" history="24"><theorem-def>TaskProperty2<ax-part/> &forall;Task &bullet; &forall;t: TASK | t &isin;state &suptilde;&lvparen;{blocked}&rvparen;&bullet; t &isin;tasks </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:23" history="25"><theorem-def>TaskProperty3<ax-part/> &forall;Task &bullet; &forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; t &isin;tasks \{running_task}</theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:24" history="26"><theorem-def>TaskProperty6<ax-part/> &forall;Task; t: TASK | 0 &lt; priority(t) &bullet; idle &neq;t </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:25" history="27"><schema-box>Init_Task<decl-part/>    Task' <ax-part/>  Init_TaskData
  Init_StateData
  Init_ContextData
  Init_PrioData </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:26" history="28"><theorem-def>TaskInit<ax-part/> &exists;Task' &bullet; Init_Task </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:27" history="29"><schema-box>Reschedule<decl-part/>   &Delta;Task
  target?: TASK
  tasks?: &Popf;TASK
  st?: STATE
  pri?: TASK &rarr;&Nopf;<ax-part/>  tasks' = tasks?
  running_task' = target?
  state' = state &oplus;{(target? &rtarr;running), (running_task &rtarr;st?)}
  phys_context' = log_context(target?)
  log_context' = log_context &oplus;{(running_task &rtarr;phys_context)}
  priority' = pri? </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:28" history="30"><zed-box> disableReschedule &eqhat;[Task | false] &wedge;Reschedule </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:29" history="31"><schema-box>CreateTaskN_T<decl-part/>   &Delta;Task
  target?: TASK
  newpri?: &Nopf;<ax-part/>  state(target?) = nonexistent
  newpri? &leq;priority(running_task)
  tasks' = tasks &cup;{target?}
  running_task' = running_task
  state' = state &oplus;{(target? &rtarr;ready)}
  &Xi;ContextData
  priority' = priority &oplus;{(target? &rtarr;newpri?)}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:30" history="32"><schema-box>CreateTaskN_TFSBSig<decl-part/>   Task
  target?: TASK 
  newpri?: &Nopf;<ax-part/>  state(target?) = nonexistent
  newpri? &leq;priority(running_task) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:31" history="33"><theorem-def>CreateTaskN_T_vc_ref<ax-part/> &forall;CreateTaskN_TFSBSig | true &bullet; <word style="roman"/>pre<word/> CreateTaskN_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:32" history="34"><schema-box>CreateTaskS_T<decl-part/>   &Delta;Task
  target?: TASK
  newpri?: &Nopf;<ax-part/>  state(target?) = nonexistent
  newpri? &gt; priority(running_task)
  &exists;st?: STATE; tasks?: &Popf;TASK; pri?: TASK &rarr;&Nopf;| st? = ready &wedge;tasks? = tasks &cup;{target?}&wedge;pri? = priority &oplus;{(target? &rtarr;newpri?)}&bullet; Reschedule </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:33" history="35"><schema-box>CreateTaskS_TFSBSig<decl-part/>   Task
  target?: TASK 
  newpri?: &Nopf;<ax-part/>  state(target?) = nonexistent
  newpri? &gt; priority(running_task) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:34" history="36"><theorem-def>CreateTaskS_T_vc_ref<ax-part/> &forall;CreateTaskS_TFSBSig | true &bullet; <word style="roman"/>pre<word/> CreateTaskS_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:35" history="37"><zed-box> CreateTask_T &eqhat;CreateTaskN_T &vee;CreateTaskS_T </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:36" history="38"><schema-box>DeleteTaskN_T<decl-part/>   &Delta;Task
  target?: TASK
  topReady!: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{ready, blocked, suspended}
  tasks' = tasks \{target?}
  running_task' = running_task
  state' = state &oplus;{(target? &rtarr;nonexistent)}
  phys_context' = phys_context
  log_context' = log_context &oplus;{(target? &rtarr;bare_context)}
  &Xi;PrioData
  topReady! = running_task </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:37" history="39"><schema-box>DeleteTaskN_TFSBSig<decl-part/>   Task
  target?: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{ready, blocked, suspended}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:38" history="40"><theorem-def>DeleteTaskN_T_vc_ref<ax-part/> &forall;DeleteTaskN_TFSBSig | true &bullet; <word style="roman"/>pre<word/> DeleteTaskN_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:39" history="41"><schema-box>DeleteTaskS_T<decl-part/>   &Delta;Task
  target?: TASK
  topReady!: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{running}
  state(topReady!) = ready
  &forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority(topReady!) &geq;priority(t)
  tasks' = tasks \{target?}
  running_task' = topReady!
  state' = state &oplus;{(topReady! &rtarr;running), (target? &rtarr;nonexistent)}
  phys_context' = log_context(topReady!)
  log_context' = log_context &oplus;{(target? &rtarr;bare_context)}
  &Xi;PrioData </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:40" history="42"><schema-box location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:40">DeleteTaskS_TFSBSig<decl-part/>    Task
  target?: TASK <ax-part/>   target? &isin;tasks \{idle}
  state(target?) &isin;{running}
 </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:41" history="43"><theorem-def>lDeleteTaskS_T_Lemma<ax-part/> &forall;Task; topReady!, target?: TASK | target? &isin;tasks \{idle}&wedge;state target? &isin;{running}&wedge;state topReady! = ready &wedge;(&forall;rtsk: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority topReady! &geq;priority rtsk) &bullet; &not;(Task[log_context := log_context &oplus;{(target?, bare_context)}, phys_context := log_context topReady!, topReady!/running_task, state := state &oplus;({(target?, nonexistent)}&cup;{(topReady!, running)}), tasks := tasks \{target?}] &wedge;(st &isin;TASK &wedge;&not;(state &oplus;({(target?, nonexistent)}&cup;{(topReady!, running)})) st = state st &rArr;(state st, (state &oplus;({(target?, nonexistent)}&cup;{(topReady!, running)})) st) &isin;transition) &rArr;t &isin;TASK &wedge;state t = ready &wedge;&not;priority topReady! &geq;priority t) </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:42" history="44"><theorem-def>DeleteTaskS_T_vc_ref<ax-part/> &forall;DeleteTaskS_TFSBSig | true &bullet; <word style="roman"/>pre<word/> DeleteTaskS_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:43" history="45"><zed-box> DeleteTask_T &eqhat;DeleteTaskN_T &vee;DeleteTaskS_T </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:44" history="46"><schema-box>ExecuteRunningTask_T<decl-part/>   &Delta;Task
  target!: TASK <ax-part/>  &Xi;TaskData
  &Xi;StateData
  phys_context' &neq;phys_context
  log_context' = log_context
  &Xi;PrioData
  target! = running_task </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:45" history="47"><schema-box>ExecuteRunningTask_TFSBSig<decl-part/>   Task <ax-part/>  &exists;phys_context': CONTEXT &bullet; phys_context' &neq;phys_context </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:46" history="48"><theorem-def>ExecuteRunningTask_T_vc_ref<ax-part/> &forall;ExecuteRunningTask_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ExecuteRunningTask_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:47" history="49"><schema-box>SuspendTaskN_T<decl-part/>   &Delta;Task
  target?: TASK
  topReady!: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{ready, blocked}
  &Xi;TaskData
  state' = state &oplus;{(target? &rtarr;suspended)}
  &Xi;ContextData
  &Xi;PrioData
  topReady! = running_task </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:48" history="50"><schema-box>SuspendTaskN_TFSBSig<decl-part/>   Task
  target?: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{ready, blocked}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:49" history="51"><theorem-def>SuspendTaskN_T_vc_ref<ax-part/> &forall;SuspendTaskN_TFSBSig | true &bullet; <word style="roman"/>pre<word/> SuspendTaskN_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:50" history="52"><schema-box>SuspendTaskS_T<decl-part/>   &Delta;Task
  target?: TASK
  topReady!: TASK <ax-part/>  target? &isin;tasks \{idle}
  state(target?) &isin;{running}
  state(topReady!) = ready
  &forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority(topReady!) &geq;priority(t)
  &exists;st?: STATE | st? = suspended &bullet; Reschedule[tasks/tasks?, priority/pri?, topReady!/target?] </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:51" history="53"><theorem-def>TaskProperty4<ax-part/> &forall;Task | SuspendTaskS_T &bullet; state' running_task = suspended &wedge;(&forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority running_task' &geq;priority t) </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:52" history="54"><theorem-def>TaskProperty5<ax-part/> &forall;Task &bullet; &forall;t: TASK | t &notin;tasks &bullet; state t = nonexistent </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:53" history="55"><schema-box location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:53">SuspendTaskS_TFSBSig<decl-part/> Task
target?: TASK<ax-part/> target? &isin; tasks \ {idle}
state target? &isin; {running}
</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:54" history="56"><theorem-def>lSuspendTaskS_T_Lemma<ax-part/> &forall;Task; target?, topReady!: TASK | target? &isin;tasks \{idle}&wedge;state target? &isin;{running}&wedge;state topReady! = ready &wedge;(&forall;rtsk: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority topReady! &geq;priority rtsk) &bullet; &not;(Task[log_context := log_context &oplus;{(running_task, phys_context)}, phys_context := log_context topReady!, topReady!/running_task, state := state &oplus;({(running_task, suspended)}&cup;{(topReady!, running)})] &wedge;(st &isin;TASK &wedge;&not;(state &oplus;({(running_task, suspended)}&cup;{(topReady!, running)})) st = state st &rArr;(state st, (state &oplus;({(running_task, suspended)}&cup;{(topReady!, running)})) st) &isin;transition) &rArr;t &isin;TASK &wedge;state t = ready &wedge;&not;priority topReady! &geq;priority t) </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:55" history="57"><theorem-def>SuspendTaskS_T_vc_ref<ax-part/> &forall;SuspendTaskS_TFSBSig | true &bullet; <word style="roman"/>pre<word/> SuspendTaskS_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:56" history="58"><schema-box>SuspendTaskO_T<decl-part/>   &Xi;Task
  target?: TASK
  topReady!: TASK <ax-part/>  state(target?) &isin;{suspended}
  topReady! = running_task </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:57" history="59"><schema-box>SuspendTaskO_TFSBSig<decl-part/>   Task
  target?: TASK
  topReady!: TASK <ax-part/>  state(target?) &isin;{suspended}</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:58" history="60"><theorem-def>SuspendTaskO_T_vc_ref<ax-part/> &forall;SuspendTaskO_TFSBSig | true &bullet; <word style="roman"/>pre<word/> SuspendTaskO_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:59" history="61"><zed-box> SuspendTask_T &eqhat;SuspendTaskN_T &vee;SuspendTaskS_T                 &vee;SuspendTaskO_T </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:60" history="62"><schema-box>ResumeTaskN_T<decl-part/>   &Delta;Task
  target?: TASK <ax-part/>  state(target?) = suspended
  priority(target?) &leq;priority(running_task)
  &Xi;TaskData
  state' = state &oplus;{(target? &rtarr;ready)}
  &Xi;ContextData
  &Xi;PrioData </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:61" history="63"><schema-box>ResumeTaskN_TFSBSig<decl-part/>   Task
  target?: TASK <ax-part/>  state(target?) = suspended
  priority(target?) &leq;priority(running_task) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:62" history="64"><theorem-def>ResumeTaskN_T_vc_ref<ax-part/> &forall;ResumeTaskN_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ResumeTaskN_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:63" history="65"><schema-box>ResumeTaskS_T<decl-part/>   &Delta;Task
  target?: TASK <ax-part/>  state(target?) = suspended
  priority(target?) &gt; priority(running_task)
  &exists;st?: STATE | st? = ready &bullet; Reschedule[tasks/tasks?, priority/pri?] </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:64" history="66"><schema-box>ResumeTaskS_TFSBSig<decl-part/>   Task
  target?: TASK <ax-part/>  state(target?) = suspended
  priority(target?) &gt; priority(running_task) </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:65" history="67"><theorem-def>ResumeTaskS_T_vc_ref<ax-part/> &forall;ResumeTaskS_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ResumeTaskS_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:66" history="68"><zed-box> ResumeTask_T &eqhat;ResumeTaskN_T &vee;ResumeTaskS_T </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:67" history="69"><schema-box>ChangeTaskPriorityN_T<decl-part/>   &Delta;Task
  newpri?: &Nopf;
  target?: TASK
  topReady!: TASK <ax-part/>  state(target?) = ready &rArr;newpri? &leq;priority(running_task)
  state(target?) = running &rArr;(&forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; newpri? &geq;priority(t))
  state(target?) &neq;nonexistent
  target? = idle &rArr;newpri? = 0
  &Xi;TaskData
  &Xi;StateData
  &Xi;ContextData
  priority' = priority &oplus;{(target? &rtarr;newpri?)}
  topReady! = running_task </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:68" history="70"><schema-box>ChangeTaskPriorityN_TFSBSig<decl-part/>   Task
  newpri?: &Nopf;
  target?: TASK <ax-part/>  state(target?) = ready &rArr;newpri? &leq;priority(running_task)
  state(target?) = running &rArr;(&forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; newpri? &geq;priority(t))
  state(target?) &neq;nonexistent
  target? = idle &rArr;newpri? = 0 </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:69" history="71"><theorem-def>ChangeTaskPriorityN_T_vc_ref<ax-part/> &forall;ChangeTaskPriorityN_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ChangeTaskPriorityN_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:70" history="72"><schema-box>ChangeTaskPriorityS_T<decl-part/>   &Delta;Task
  target?: TASK
  newpri?: &Nopf;
  topReady!: TASK <ax-part/>  state(target?) = ready
  newpri? &gt; priority(running_task)
  target? = idle &rArr;newpri? = 0
  &exists;st?: STATE; pri?: TASK &rarr;&Nopf;| st? = ready &wedge;pri? = priority &oplus;{(target? &rtarr;newpri?)}&bullet; Reschedule[tasks/tasks?]
  topReady! = target? </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:71" history="73"><schema-box>ChangeTaskPriorityS_TFSBSig<decl-part/>   Task
  newpri?: &Nopf;
  target?: TASK <ax-part/>  state(target?) = ready
  newpri? &gt; priority(running_task)
  target? = idle &rArr;newpri? = 0 </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:72" history="74"><theorem-def>ChangeTaskPriorityS_T_vc_ref<ax-part/> &forall;ChangeTaskPriorityS_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ChangeTaskPriorityS_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:73" history="75"><schema-box>ChangeTaskPriorityD_T<decl-part/>   &Delta;Task
  target?: TASK
  topReady!: TASK
  newpri?: &Nopf;<ax-part/>  state(target?) = running
  target? = idle &rArr;newpri? = 0
  state(topReady!) = ready
  &forall;t: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority(topReady!) &geq;priority(t)
  newpri? &lt; priority(topReady!)
  &exists;st?: STATE; pri?: TASK &rarr;&Nopf;| st? = ready &wedge;pri? = priority &oplus;{(target? &rtarr;newpri?)}&bullet; Reschedule[tasks/tasks?, topReady!/target?] </schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:74" history="76"><schema-box location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:74">ChangeTaskPriorityD_TFSBSig<decl-part/> Task
newpri?: &Nopf;
target?: TASK<ax-part/> state target? = running
target? = idle &rArr; newpri? = 0
&exists; readyTask: state &suptilde; &lvparen; {ready} &rvparen;
    &bullet; newpri? &lt; priority readyTask</schema-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:75" history="77"><theorem-def>lChangeTaskPriorityD_T_Lemma<ax-part/> &forall;Task; target?, topReady!: TASK; newpri?: &Nopf;| state target? = running &wedge;(target? = idle &rArr;newpri? = 0) &wedge;state topReady! = ready &wedge;(&forall;rtsk: state &suptilde;&lvparen;{ready}&rvparen;&bullet; priority topReady! &geq;priority rtsk) &wedge;newpri? &lt; priority topReady! &bullet; &not;(Task[log_context := log_context &oplus;{(running_task, phys_context)}, phys_context := log_context topReady!, priority := priority &oplus;{(target?, newpri?)}, topReady!/running_task, state := state &oplus;({(running_task, ready)}&cup;{(topReady!, running)})] &wedge;(st &isin;TASK &wedge;&not;(state &oplus;({(running_task, ready)}&cup;{(topReady!, running)})) st = state st &rArr;(state st, (state &oplus;({(running_task, ready)}&cup;{(topReady!, running)})) st) &isin;transition) &rArr;t &isin;TASK &wedge;state t = ready &wedge;&not;priority topReady! &geq;priority t) </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:76" history="78"><theorem-def>ChangeTaskPriorityD_T_vc_ref<ax-part/> &forall;ChangeTaskPriorityD_TFSBSig | true &bullet; <word style="roman"/>pre<word/> ChangeTaskPriorityD_T </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:77" history="79"><zed-box> ChangeTaskPriority_T &eqhat;ChangeTaskPriorityN_T                        &vee;ChangeTaskPriorityS_T                        &vee;ChangeTaskPriorityD_T </zed-box></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:78" history="80"><theorem-def>CaseStudyStep1<ax-part/> &forall;Task; target?: TASK; newpri?: &Nopf;| tasks = {idle}&wedge;running_task = idle &wedge;newpri? = 1 &wedge;CreateTask_T &bullet; target? &isin;tasks' &wedge;state' target? = running &wedge;priority' target? = 1 </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:79" history="81"><theorem-def>CaseStudyStep3<ax-part/> &forall;Task; target?: TASK; newpri?: &Nopf;| tasks = {idle, Task1, Task2}&wedge;priority Task1 = 1 &wedge;priority Task2 = 2 &wedge;state Task1 = ready &wedge;running_task = Task2 &wedge;target? = Task1 &wedge;newpri? = 3 &wedge;ChangeTaskPriority_T &bullet; priority' Task1 = 3 &wedge;running_task' = Task1 </theorem-def></textItem
><textItem location="/usr/userfs/s/sc677/z-spec-freertos/ZedSpecFreeRTOS_T.tex:80" history="82"><theorem-def>CaseStudyStep5<ax-part/> &forall;Task; Task1, Task2, Task3, target?: TASK | tasks = {idle, Task1, Task2, Task3}&wedge;priority Task1 = 3 &wedge;priority Task2 = 2 &wedge;priority Task3 = 4 &wedge;state Task1 = ready &wedge;state Task2 = ready &wedge;state Task3 = running &wedge;target? = Task3 &wedge;DeleteTask_T &bullet; state' Task3 = nonexistent &wedge;Task3 &notin;tasks' &wedge;running_task' = Task1 </theorem-def></textItem
><script name="ChangeTaskPriorityN_T_vc_ref"><scriptItem number="2"><ztext> with enabled (applyOverride) prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>instantiate t == pt</ztext></scriptItem
><scriptItem number="5"><ztext>with normalization prove</ztext></scriptItem
></script
><script name="TaskDataInit"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="CreateTaskN_T_vc_ref"><scriptItem number="2"><ztext> with disabled (ContextData) prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate (state &oplus;{(target?, ready)}) &suptilde;&lvparen;{running}&rvparen;= state &suptilde;&lvparen;{running}&rvparen;</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate TASK \((state &oplus;{(target?, ready)}) &suptilde;&lvparen;{nonexistent}&rvparen;) = {target?}&cup;(TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;))</ztext></scriptItem
><scriptItem number="5"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="6"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="7"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="8"><ztext>with normalization reduce</ztext></scriptItem
></script
><script name="DeleteTaskN_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate TASK \((state &oplus;{(target?, nonexistent)}) &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \({target?}&cup;(state &suptilde;&lvparen;{nonexistent}&rvparen;))</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate (state &oplus;{(target?, nonexistent)}) &suptilde;&lvparen;{running}&rvparen;= state &suptilde;&lvparen;{running}&rvparen;</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="9"><ztext>split state target? = ready</ztext></scriptItem
><scriptItem number="10"><ztext>prove</ztext></scriptItem
><scriptItem number="11"><ztext>split state target? = blocked</ztext></scriptItem
><scriptItem number="12"><ztext>prove</ztext></scriptItem
></script
><script name="ContextDataInit"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="ChangeTaskPriorityD_T_vc_ref"><scriptItem number="2"><ztext>use   topReadyTask[a:=state&suptilde;&lvparen;{ready}&rvparen;]</ztext></scriptItem
><scriptItem number="3"><ztext> with disabled (Task) prove by reduce</ztext></scriptItem
><scriptItem number="4"><ztext>instantiate   running_task' == f(state&suptilde;&lvparen;{ready}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>prove</ztext></scriptItem
><scriptItem number="6"><ztext>use  lChangeTaskPriorityD_T_Lemma[topReady!:=f(state&suptilde;&lvparen;{ready}&rvparen;)]</ztext></scriptItem
><scriptItem number="7"><ztext>prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate   t__0 == readyTask</ztext></scriptItem
><scriptItem number="9"><ztext>instantiate t__0 == rtsk</ztext></scriptItem
><scriptItem number="10"><ztext>instantiate t__0 == t</ztext></scriptItem
><scriptItem number="11"><ztext>prove</ztext></scriptItem
></script
><script name="ExecuteRunningTask_T_vc_ref"><scriptItem number="2"><ztext> with disabled (TaskData, StateData, PrioData) prove by reduce</ztext></scriptItem
></script
><script name="TaskProperty4"><scriptItem number="2"><ztext> with disabled (&Delta;Task, Task) prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>use TaskProperty3[t := topReady!]</ztext></scriptItem
><scriptItem number="4"><ztext>instantiate t__0 == t</ztext></scriptItem
><scriptItem number="5"><ztext>prove</ztext></scriptItem
></script
><script name="TaskInit"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality</ztext></scriptItem
><scriptItem number="4"><ztext>prove</ztext></scriptItem
><scriptItem number="5"><ztext>apply applyOverride1</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
></script
><script name="lChangeTaskPriorityD_T_Lemma"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \((state &oplus;({(running_task, ready)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate (state &oplus;({(running_task, ready)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{running}&rvparen;= {topReady!}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate x__1 == target?</ztext></scriptItem
><scriptItem number="9"><ztext>cases</ztext></scriptItem
><scriptItem number="10"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="11"><ztext>next</ztext></scriptItem
><scriptItem number="12"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="13"><ztext>next</ztext></scriptItem
><scriptItem number="14"><ztext>instantiate x__1 == x__0</ztext></scriptItem
><scriptItem number="15"><ztext>with enabled (applyOverride) with normalization prove</ztext></scriptItem
><scriptItem number="16"><ztext>next</ztext></scriptItem
><scriptItem number="17"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="18"><ztext>next</ztext></scriptItem
><scriptItem number="19"><ztext>instantiate rtsk == pt</ztext></scriptItem
><scriptItem number="20"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="21"><ztext>next</ztext></scriptItem
><scriptItem number="22"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="23"><ztext>next</ztext></scriptItem
><scriptItem number="24"><ztext>instantiate rtsk == t</ztext></scriptItem
><scriptItem number="25"><ztext>prove</ztext></scriptItem
><scriptItem number="26"><ztext>next</ztext></scriptItem
></script
><script name="CaseStudyStep5"><scriptItem number="2"><ztext> with disabled (Task, DeleteTaskS_T) reduce</ztext></scriptItem
><scriptItem number="3"><ztext>invoke Task</ztext></scriptItem
><scriptItem number="4"><ztext>invoke DeleteTaskS_T</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate tasks = TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="6"><ztext>instantiate y == topReady!</ztext></scriptItem
><scriptItem number="7"><ztext>instantiate t == Task1</ztext></scriptItem
><scriptItem number="8"><ztext>invoke PrioData</ztext></scriptItem
><scriptItem number="9"><ztext>split topReady! = idle</ztext></scriptItem
><scriptItem number="10"><ztext>prove</ztext></scriptItem
></script
><script name="CaseStudyStep1"><scriptItem number="2"><ztext> with disabled (CreateTaskS_T, StateData, TaskData, ContextData) reduce</ztext></scriptItem
><scriptItem number="3"><ztext>prove by reduce</ztext></scriptItem
></script
><script name="CaseStudyStep3"><scriptItem number="2"><ztext> with disabled (Task, ChangeTaskPriorityS_T) prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>prove by reduce</ztext></scriptItem
></script
><script name="DeleteTaskS_T_vc_ref"><scriptItem number="2"><ztext>use  topReadyTask[a:= state &suptilde;&lvparen;{ready}&rvparen;]</ztext></scriptItem
><scriptItem number="3"><ztext> with disabled (Task) prove by reduce</ztext></scriptItem
><scriptItem number="4"><ztext>instantiate  running_task' ==f (state&suptilde;&lvparen;{ready}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>prove</ztext></scriptItem
><scriptItem number="6"><ztext>use  lDeleteTaskS_T_Lemma[topReady!:=f(state &suptilde;&lvparen;{ready}&rvparen;)]</ztext></scriptItem
><scriptItem number="7"><ztext>prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate t__0 == rtsk</ztext></scriptItem
><scriptItem number="9"><ztext>prove</ztext></scriptItem
></script
><script name="SuspendTaskO_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="ResumeTaskS_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate TASK \((state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate (state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{running}&rvparen;= {target?}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate x__1 == x__0</ztext></scriptItem
><scriptItem number="9"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="10"><ztext>cases</ztext></scriptItem
><scriptItem number="11"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="12"><ztext>next</ztext></scriptItem
><scriptItem number="13"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="14"><ztext>next</ztext></scriptItem
><scriptItem number="15"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="16"><ztext>next</ztext></scriptItem
><scriptItem number="17"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="18"><ztext>next</ztext></scriptItem
><scriptItem number="19"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="20"><ztext>next</ztext></scriptItem
><scriptItem number="21"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="22"><ztext>next</ztext></scriptItem
><scriptItem number="23"><ztext>split st = running_task</ztext></scriptItem
><scriptItem number="24"><ztext>prove</ztext></scriptItem
><scriptItem number="25"><ztext>next</ztext></scriptItem
></script
><script name="TaskProperty2"><scriptItem number="2"><ztext> invoke Task</ztext></scriptItem
><scriptItem number="3"><ztext>prove</ztext></scriptItem
></script
><script name="gTransitionType"><scriptItem number="2"><ztext> with enabled (transition) prove by reduce</ztext></scriptItem
></script
><script name="PrioDataInit"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="StateDataInit"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="SuspendTaskS_T_vc_ref"><scriptItem number="2"><ztext>use  topReadyTask[a:=state&suptilde;&lvparen;{ready}&rvparen;]</ztext></scriptItem
><scriptItem number="3"><ztext> with disabled (Task) prove by reduce</ztext></scriptItem
><scriptItem number="4"><ztext>instantiate  running_task' == f(state &suptilde;&lvparen;{ready}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>prove</ztext></scriptItem
><scriptItem number="6"><ztext>use  lSuspendTaskS_T_Lemma[topReady! :=  f(state &suptilde;&lvparen;{ready}&rvparen;)]</ztext></scriptItem
><scriptItem number="7"><ztext>prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate t__0 == rtsk</ztext></scriptItem
><scriptItem number="9"><ztext>prove</ztext></scriptItem
></script
><script name="ChangeTaskPriorityS_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate TASK \((state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate (state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{running}&rvparen;= {target?}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="8"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="9"><ztext>apply applyCupRight</ztext></scriptItem
><scriptItem number="10"><ztext>apply applyCupLeft</ztext></scriptItem
><scriptItem number="11"><ztext>prove</ztext></scriptItem
><scriptItem number="12"><ztext>instantiate x == x__0</ztext></scriptItem
><scriptItem number="13"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="14"><ztext>cases</ztext></scriptItem
><scriptItem number="15"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="16"><ztext>next</ztext></scriptItem
><scriptItem number="17"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="18"><ztext>next</ztext></scriptItem
><scriptItem number="19"><ztext>with normalization reduce</ztext></scriptItem
><scriptItem number="20"><ztext>next</ztext></scriptItem
></script
><script name="ResumeTaskN_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \((state &oplus;{(target?, ready)}) &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate (state &oplus;{(target?, ready)}) &suptilde;&lvparen;{running}&rvparen;= state &suptilde;&lvparen;{running}&rvparen;</ztext></scriptItem
><scriptItem number="5"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="6"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="7"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="8"><ztext>with normalization prove</ztext></scriptItem
></script
><script name="CreateTaskS_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply applyOverride to expression (state &oplus;({(running_task, ready)}&cup;{(target?, running)})) idle</ztext></scriptItem
><scriptItem number="4"><ztext>prove</ztext></scriptItem
><scriptItem number="5"><ztext>cases</ztext></scriptItem
><scriptItem number="6"><ztext>apply extensionality to predicate (state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{running}&rvparen;= {target?}</ztext></scriptItem
><scriptItem number="7"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="8"><ztext>prove</ztext></scriptItem
><scriptItem number="9"><ztext>instantiate x__0 == x</ztext></scriptItem
><scriptItem number="10"><ztext>prove</ztext></scriptItem
><scriptItem number="11"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="12"><ztext>prove</ztext></scriptItem
><scriptItem number="13"><ztext>split x &isin;TASK</ztext></scriptItem
><scriptItem number="14"><ztext>split x = running_task</ztext></scriptItem
><scriptItem number="15"><ztext>prove</ztext></scriptItem
><scriptItem number="16"><ztext>next</ztext></scriptItem
><scriptItem number="17"><ztext>apply extensionality to predicate TASK \((state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;) &cup;((state &oplus;({(running_task, ready)}&cup;{(target?, running)})) &suptilde;&lvparen;{running}&rvparen;)</ztext></scriptItem
><scriptItem number="18"><ztext>prove</ztext></scriptItem
><scriptItem number="19"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="20"><ztext>prove</ztext></scriptItem
><scriptItem number="21"><ztext>split y = running_task</ztext></scriptItem
><scriptItem number="22"><ztext>split y = target?</ztext></scriptItem
><scriptItem number="23"><ztext>split &not;state y = nonexistent</ztext></scriptItem
><scriptItem number="24"><ztext>prove</ztext></scriptItem
><scriptItem number="25"><ztext>next</ztext></scriptItem
><scriptItem number="26"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="27"><ztext>prove</ztext></scriptItem
><scriptItem number="28"><ztext>split pt = running_task</ztext></scriptItem
><scriptItem number="29"><ztext>prove</ztext></scriptItem
><scriptItem number="30"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="31"><ztext>prove</ztext></scriptItem
><scriptItem number="32"><ztext>next</ztext></scriptItem
><scriptItem number="33"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="34"><ztext>prove</ztext></scriptItem
><scriptItem number="35"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="36"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="37"><ztext>instantiate y == st</ztext></scriptItem
><scriptItem number="38"><ztext>prove</ztext></scriptItem
><scriptItem number="39"><ztext>next</ztext></scriptItem
></script
><script name="TaskProperty5"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="lInTransition"><scriptItem number="2"><ztext> with normalization with enabled (transition) prove by reduce</ztext></scriptItem
></script
><script name="TaskProperty6"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
></script
><script name="TaskProperty1"><scriptItem number="2"><ztext> invoke Task</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>rewrite</ztext></scriptItem
></script
><script name="TaskProperty3"><scriptItem number="2"><ztext> invoke Task</ztext></scriptItem
><scriptItem number="3"><ztext>prove</ztext></scriptItem
></script
><script name="SuspendTaskN_T_vc_ref"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \((state &oplus;{(target?, suspended)}) &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate (state &oplus;{(target?, suspended)}) &suptilde;&lvparen;{running}&rvparen;= state &suptilde;&lvparen;{running}&rvparen;</ztext></scriptItem
><scriptItem number="5"><ztext>instantiate pt__0 == pt</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>apply applyOverride</ztext></scriptItem
><scriptItem number="8"><ztext>prove</ztext></scriptItem
><scriptItem number="9"><ztext>cases</ztext></scriptItem
><scriptItem number="10"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="11"><ztext>next</ztext></scriptItem
><scriptItem number="12"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="13"><ztext>next</ztext></scriptItem
><scriptItem number="14"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="15"><ztext>next</ztext></scriptItem
><scriptItem number="16"><ztext>split state target? = ready</ztext></scriptItem
><scriptItem number="17"><ztext>prove</ztext></scriptItem
><scriptItem number="18"><ztext>next</ztext></scriptItem
></script
><script name="lDeleteTaskS_T_Lemma"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate TASK \({target?}&cup;(state &suptilde;&lvparen;{nonexistent}&rvparen;)) = TASK \((state &oplus;({(target?, nonexistent)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate (state &oplus;({(target?, nonexistent)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{running}&rvparen;= {topReady!}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate x == target?</ztext></scriptItem
><scriptItem number="9"><ztext>cases</ztext></scriptItem
><scriptItem number="10"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="11"><ztext>next</ztext></scriptItem
><scriptItem number="12"><ztext>instantiate x__0 == x</ztext></scriptItem
><scriptItem number="13"><ztext>with enabled (applyOverride) with normalization prove</ztext></scriptItem
><scriptItem number="14"><ztext>next</ztext></scriptItem
><scriptItem number="15"><ztext>split state idle = running</ztext></scriptItem
><scriptItem number="16"><ztext>prove</ztext></scriptItem
><scriptItem number="17"><ztext>next</ztext></scriptItem
><scriptItem number="18"><ztext>instantiate rtsk == pt</ztext></scriptItem
><scriptItem number="19"><ztext>with enabled (applyOverride) with normalization prove</ztext></scriptItem
><scriptItem number="20"><ztext>next</ztext></scriptItem
><scriptItem number="21"><ztext>split st = running_task</ztext></scriptItem
><scriptItem number="22"><ztext>prove</ztext></scriptItem
><scriptItem number="23"><ztext>next</ztext></scriptItem
><scriptItem number="24"><ztext>instantiate rtsk == t</ztext></scriptItem
><scriptItem number="25"><ztext>prove</ztext></scriptItem
><scriptItem number="26"><ztext>next</ztext></scriptItem
></script
><script name="lSuspendTaskS_T_Lemma"><scriptItem number="2"><ztext> prove by reduce</ztext></scriptItem
><scriptItem number="3"><ztext>apply extensionality to predicate state &suptilde;&lvparen;{running}&rvparen;= {running_task}</ztext></scriptItem
><scriptItem number="4"><ztext>apply extensionality to predicate TASK \(state &suptilde;&lvparen;{nonexistent}&rvparen;) = TASK \((state &oplus;({(running_task, suspended)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{nonexistent}&rvparen;)</ztext></scriptItem
><scriptItem number="5"><ztext>apply extensionality to predicate (state &oplus;({(running_task, suspended)}&cup;{(topReady!, running)})) &suptilde;&lvparen;{running}&rvparen;= {topReady!}</ztext></scriptItem
><scriptItem number="6"><ztext>prove</ztext></scriptItem
><scriptItem number="7"><ztext>with enabled (applyOverride) prove</ztext></scriptItem
><scriptItem number="8"><ztext>instantiate x__1 == target?</ztext></scriptItem
><scriptItem number="9"><ztext>cases</ztext></scriptItem
><scriptItem number="10"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="11"><ztext>next</ztext></scriptItem
><scriptItem number="12"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="13"><ztext>next</ztext></scriptItem
><scriptItem number="14"><ztext>instantiate x__1 == x__0</ztext></scriptItem
><scriptItem number="15"><ztext>with enabled (applyOverride) with normalization prove</ztext></scriptItem
><scriptItem number="16"><ztext>next</ztext></scriptItem
><scriptItem number="17"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="18"><ztext>next</ztext></scriptItem
><scriptItem number="19"><ztext>instantiate rtsk == pt</ztext></scriptItem
><scriptItem number="20"><ztext>with normalization prove</ztext></scriptItem
><scriptItem number="21"><ztext>next</ztext></scriptItem
><scriptItem number="22"><ztext>split st = running_task</ztext></scriptItem
><scriptItem number="23"><ztext>prove</ztext></scriptItem
><scriptItem number="24"><ztext>next</ztext></scriptItem
><scriptItem number="25"><ztext>instantiate rtsk == t</ztext></scriptItem
><scriptItem number="26"><ztext>prove</ztext></scriptItem
><scriptItem number="27"><ztext>next</ztext></scriptItem
></script
><script name="f$domainCheck"><scriptItem number="2"><ztext>prove</ztext></scriptItem
></script
></Z-EVES-GUI-State>